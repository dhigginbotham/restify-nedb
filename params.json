{"name":"Restify NeDB","tagline":"Express module that adds a REST API for NeDB","body":"# restify-nedb (for [nedb](https://github.com/louischatriot/nedb)) <img src=\"https://badge.fury.io/js/restify-nedb.png\" align=\"right\" />&nbsp;<img src=\"https://drone.io/github.com/dhigginbotham/restify-nedb/status.png\" align=\"right\" />\r\n\r\n`restify-nedb` was built to give you restful api resources for client side application frameworks like `angular.js`, `ember.js`, `backbone.js` or `knockout.js` as well as give you a simple file/memory based cache utilizing [nedb](https://github.com/louischatriot/nedb). (ps, i love [nedb](https://github.com/louischatriot/nedb), you should too.) If you haven't already checked it out, maybe you want to use it separate of all of this extra stuff, do it. It's like sqlite, with a subset of mongodb's api. _Really neat._\r\n\r\n### Heads up, she's still a baby\r\n- Let me know if you have any issues, please open issues/prs etc, it's a lot more fun that way\r\n- There's still a good chunk of the `nedb` api I need to wrap in, if you need the core crud stuff, this should work well for you\r\n- I'd like to point out there coule be a few rough parts, but it's coming along.  \r\n\r\n### Features\r\n- Super fast `nedb` file/memory backed cache w/ simple garbage collection\r\n- 100% coffeescript, hate it or love it \r\n- restful routing: `GET`, `POST`, `PUT`, `DELETE` \r\n- parses `json/multi-part`\r\n\r\n### Installation (w/ Express)\r\n\r\n##### Step 1) Install the app, automatically add the latest version in your `package.json`\r\n\r\n```\r\nnpm install restify-nedb --save\r\n```\r\n\r\n##### Step 2) Configure your app, needs access to `app`, so you can do that a number of ways, `req.app`, `res.app`, `app.use`, `app`, etc..\r\n\r\n```js\r\n\r\n  /* example in .js */\r\n\r\nvar express = require('express');\r\nvar app = express();\r\n\r\nvar restify = require('restify-nedb').mount;\r\nvar config = require('restify-nedb').config;\r\n\r\nvar sampleMiddleware = function (req, res, next) {\r\n  console.log('here\\'s a sample middleware...');\r\n  return next();\r\n};\r\n\r\n// default config options\r\nvar opts = {\r\n  filePath: __dirname + '/db/filestore.db',\r\n  maxAge: 1000 * 60 * 60,\r\n  prefix: '/session',\r\n  middleware: [sampleMiddleware]\r\n};\r\n\r\n// initialize our config object\r\n\r\ncfg = new config(opts);\r\n\r\n// if you aren't already using an nedb\r\n// instance, then calling this will create\r\n// one for you.\r\ncfg.makeDataStore();\r\n\r\n// builds routes\r\napi = new restify(cfg, app);\r\n```\r\n----\r\n```coffee\r\nexpress = require \"express\"\r\napp = module.exports = express()\r\n\r\nrestify = require(\"restify-nedb\").mount\r\nconfig = require(\"restify-nedb\").config\r\n\r\nsampleMiddleware = (req, res, next) ->\r\n  console.log \"here's a sample middleware...\"\r\n  next()\r\n\r\nopts = \r\n  filePath: conf.app.paths.cache\r\n  maxAge: 1000 * 60 * 60\r\n  prefix: \"/session\"\r\n  middleware: [sampleMiddleware]\r\n\r\ncfg = new config opts\r\n\r\n# if you aren't already using an nedb\r\n# instance, then calling this will create\r\n# one for you.\r\ncfg.makeDataStore()\r\n\r\n# builds routes\r\napi = new restify cfg, app\r\n```\r\n\r\n##### Step 3) Submit bugs and nasties [here](https://github.com/dhigginbotham/restify-nedb/issues).\r\n\r\n## Configuration Options\r\nOptions | Defaults | Type | Infos\r\n--- | --- | --- | ---\r\n**ds** | `internal` | DataStore | allow for outside nedb processes to be restified. tip: `config.ds()` returns a new DataStore with whatever your `opts` are set to, once it's fired it will internalize and share\r\n**prefix** | `/ds` | String | defines the first route path, for instance `http://localhost:3000/ds`\r\n**version** | `/v1` | String | not preferred, as a rule i feel these aren't the best idea for your api, last thing you want is fragmentation in your api\r\n**exclude** | `[]` | Array | excludes keys/values from the api, good for things like `password` \r\n**middleware** | `[]` | Array | middlewares, ie passport authentication, logging, analytics\r\n**memoryStore** | `false` | Boolean | whether or not keep an in-memory store or a file based persistant store, defaults to `false`, we like persistant files.\r\n**fileName** | `nedb-filestore.db` | String | file name for your nedb filestore\r\n**filePath** | `../db` | String | bit easier to change the path and view the contents instead of digging through `node_modules`\r\n**maxAge** | `1000 * 60 * 60` | Number | if set to `null` or `false` automated gc will be disabled\r\n**store** | `undefined` | String | `not currently working` - will allow for multiple nedb collections, still working out the kinks.\r\n\r\n## Routes\r\n\r\n```md\r\nGET http://localhost:3000/session/v1\r\nPOST http://localhost:3000/session/v1\r\n\r\nGET http://localhost:3000/session/v1/:id\r\nPUT http://localhost:3000/session/v1/:id\r\nDELETE http://localhost:3000/session/v1/:id\r\n\r\nGET http://localhost:3000/session/v1?id=:id\r\nPUT http://localhost:3000/session/v1?id=:id\r\n```\r\n### Ordering\r\n\r\n```md\r\nGET http://localhost:3000/session/v1?limit=20\r\nGET http://localhost:3000/session/v1?skip=10\r\nGET http://localhost:3000/session/v1?sort=val\r\nGET http://localhost:3000/session/v1?sort=-val\r\n```\r\n\r\n### Query / Searching\r\n\r\n```md\r\nGET http://localhost:3000/session/v1?key=value\r\n```\r\n\r\n### Additional\r\n\r\n```md\r\nPUT http://localhost:3000/session/v1/:id?append=true\r\n```\r\n- append defaults to false. Set to true to do something similar to `findAndUpdate`\r\n \r\n```md\r\nPOST http://localhost:3000/session/v1\r\n```\r\n\r\n- `_stale` in your body/json will act as an override to `stale`, say you need some things to last longer/shorter than other cached items\r\n \r\n##### Tests\r\n\r\n```md\r\nmocha test\\crud.coffee -R spec --compilers coffee:coffee-script\r\n```\r\n\r\n##### Pro-tips\r\n- I would recommend using something like [Advanced REST Client](https://chrome.google.com/webstore/detail/advanced-rest-client/hgmloofddffdnphfgcellkdfbfbjeloo?hl=en-US) for testing, it'll help.\r\n- If you want upto date / latest documentation run `cake docs`, this way if I forget, you can easily skim thru the source -- `/docs` should be included.\r\n\r\n![](https://nodei.co/npm/restify-nedb.png?downloads=true&stars=true)\r\n\r\n\r\n## License\r\n```md\r\nThe MIT License (MIT)\r\n\r\nCopyright (c) 2013 David Higginbotham \r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\nTHE SOFTWARE.\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}